/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/script/modules/createElements.js

const getTimeInner = timeDuration => {
  console.log('++++');
  timeDuration.insertAdjacentHTML('afterbegin', ` <p class="time__title">
      До конца акции:
    </p>
    <div class="time__duration">
      <div class="time__show time__show_days">
        <p class="time__digital digital__day"></p>
      <p class="time__alpha alpha__day"></p>
      </div>
      <div class="time__show time__show_hours">
        <p class="time__digital digital__hour"></p>
        <p class="time__alpha alpha__hour"></p>
      </div>
      <div class="time__show time__show_minutes">
        <p class="time__digital digital__minute"></p>
        <p class="time__alpha alpha__minute"></p>
      </div>
      <div class="time__show time__show_seconds">
        <p class="time__digital digital__second"></p><p class="time__alpha alpha__second"></p>
      </div>                        
    </div> `);
  return timeDuration;
};
const createElemWithClass = (elem, className) => {
  const elemClass = document.createElement(elem);
  elemClass.className = className;
  return elemClass;
};
const createSaleIcon = (tegName, className, discount) => {
  const spanSale = createElemWithClass(tegName, className);
  spanSale.textContent = `-${discount}%`;
  return spanSale;
};

//  ==================  MENU ===========================
const createMenuItem = item => {
  const liItem = createElemWithClass('li', 'sublist__item');
  const link = createElemWithClass('a', 'sublist__link');
  link.textContent = item;
  liItem.append(link);
  link.href = `/catalog.html#${item}`;
  link.target = '_blank';
  return liItem;
};

// ================  CATALOG page  =====================

const createCatalogItem = ({
  id,
  price,
  title,
  image,
  discount,
  category
}) => {
  const li = createElemWithClass('li', 'benefit__item card');
  li.dataset.name = id;
  const link = createElemWithClass('a', 'benefit__link');
  const href = `/card.html#${category}#${id}`;
  link.target = '_blank';
  link.href = href;
  const wrapIMG = createElemWithClass('div', 'card-img__wrapper');
  const img = createElemWithClass('img', 'card__img');
  img.loading = 'lazy';
  img.width = '420';
  img.height = '295';
  img.src = createImageSRC(image);
  wrapIMG.append(img);
  const wrapPrice = createElemWithClass('div', 'card__price');
  const priceFinal = createElemWithClass('span', 'card__sale-price');
  priceFinal.textContent = `${price} ₽`;
  if (discount) {
    const saleIcon = createSaleIcon('span', 'card__sale', discount);
    wrapIMG.append(saleIcon);
    const priceStart = createElemWithClass('span', 'card__start-price');
    priceStart.textContent = `${price} ₽`;
    priceFinal.textContent = getPriceFinal(price, discount) + ' ₽';
    wrapPrice.append(priceFinal, priceStart);
  } else {
    wrapPrice.append(priceFinal);
  }
  const itemTitle = createElemWithClass('p', 'card__title');
  itemTitle.textContent = title;
  link.append(wrapIMG, wrapPrice, title);
  li.append(link);
  return li;
};
const createElements_createCatalog = (data, catalogName) => {
  const title = createElemWithClass('h1', 'catalog__title');
  title.textContent = catalogName;
  const catalogList = data.map(item => createCatalogItem(item));
  const list = createElemWithClass('ul', 'benefit__list');
  list.append(...catalogList);
  return {
    list,
    title
  };
};

// ==================  CARD page ========================

const createImgCard = ({
  discount,
  image
}) => {
  const imgBox = createElemWithClass('div', 'good-card__img-box');
  const img = createElemWithClass('img', 'good-card__img');
  // img.width = '420';
  // img.height = '295';
  img.src = createImageSRC(image);
  imgBox.append(img);
  if (discount) {
    const saleIcon = createSaleIcon('div', 'sale good-card__sale', discount);
    imgBox.append(saleIcon);
  }
  return imgBox;
};
const createCart = ({
  price: priceStart,
  discount
}) => {
  const cart = createElemWithClass('div', 'good-card__price good-price');
  cart.insertAdjacentHTML('afterbegin', `     
        <p class="good-price__credit">В кредит от 5600 ₽ </p>
        <button class="button good-price__btn">Добавить в корзину</button>
        <button class="good-price__favorite">
          <svg width="33" height="33" viewBox="0 0 33 33" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_901_1437)">
              <path d="M22.6875 4.125C20.295 4.125 17.9987 5.23875 16.5 6.99875C15.0012 5.23875 12.705 4.125 10.3125 4.125C6.0775 4.125 2.75 7.4525 2.75 11.6875C2.75 16.885 7.425 21.12 14.5062 27.555L16.5 29.3563L18.4937 27.5413C25.575 21.12 30.25 16.885 30.25 11.6875C30.25 7.4525 26.9225 4.125 22.6875 4.125ZM16.6375 25.5062L16.5 25.6437L16.3625 25.5062C9.8175 19.58 5.5 15.6613 5.5 11.6875C5.5 8.9375 7.5625 6.875 10.3125 6.875C12.43 6.875 14.4925 8.23625 15.2212 10.12H17.7925C18.5075 8.23625 20.57 6.875 22.6875 6.875C25.4375 6.875 27.5 8.9375 27.5 11.6875C27.5 15.6613 23.1825 19.58 16.6375 25.5062Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_901_1437">
              <rect width="33" height="33" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </button>
        <div class="good-price__outer-box">
          <div class="good-price__inner-box">
            <p class="good-price__subtitle">
              Доставка
            </p>
            <p class="good-price__subtitle-detail">
              1-3 января
            </p>
          </div>
          <div class="good-price__inner-box">
            <p class="good-price__subtitle">
              Продавец
            </p>
            <p class="good-price__subtitle-detail">
              ShopOnline
            </p>          
          </div>
          </div>
          <button class="good-price__bell">Узнать о снижении цены</button>
        </div>
      `);
  const priceFinal = getPriceFinal(priceStart, discount);
  const formatPriceFinal = formatPrice(priceFinal);
  const formatPriceStart = formatPrice(priceStart);
  const priceFinalElem = createElemWithClass('span', 'good-price__title');
  priceFinalElem.textContent = `${formatPriceFinal} ₽`;
  cart.prepend(priceFinalElem);
  if (discount) {
    const priceStartElem = createElemWithClass('span', 'good-price__old-title');
    priceStartElem.textContent = `${formatPriceStart} ₽`;
    priceFinalElem.after(priceStartElem);
  }
  console.log(cart);
  return cart;
};
const createDescript = ({
  description
}) => {
  const title = createElemWithClass('h2', 'good-card__subtitle');
  title.textContent = 'Описание:';
  const content = createElemWithClass('p', 'good-card__description');
  content.textContent = description;
  return {
    title,
    content
  };
};
const createElements_createCard = data => {
  const titlePage = createElemWithClass('h1', 'good-card__title');
  titlePage.textContent = data.title;
  const cart = createCart(data);
  const img = createImgCard(data);
  const wrapCard = createElemWithClass('div', 'good-card__wrap');
  wrapCard.append(img, cart);
  const {
    title: titleDescript,
    content
  } = createDescript(data);
  return {
    titlePage,
    wrapCard,
    titleDescript,
    content
  };
};

;// CONCATENATED MODULE: ./src/script/modules/getNames.js
const getNameDays = days => {
  if (days % 10 === 1 && days !== 11) {
    return 'день';
  } else if ((days % 10 === 2 || days % 10 === 3 || days % 10 === 4) && (days <= 5 || days >= 20)) {
    return 'дня';
  } else {
    return 'дней';
  }
};
const getNameHours = hours => {
  if (hours === 1 || hours === 21) {
    return 'час';
  } else if (hours >= 5 && hours <= 20 || hours % 10 === 0) {
    return 'часов';
  } else {
    return 'часа';
  }
};
const getNameMinutes = minutes => {
  if (minutes % 10 === 1 && minutes !== 11) {
    return 'минута';
  } else if ((minutes % 10 === 2 || minutes % 10 === 3 || minutes % 10 === 4) && (minutes <= 5 || minutes >= 20)) {
    return 'минуты';
  } else {
    return 'минут';
  }
};
const getNameSeconds = seconds => {
  if (seconds % 10 === 1 && seconds !== 11) {
    return 'секунда';
  } else if ((seconds % 10 === 2 || seconds % 10 === 3 || seconds % 10 === 4) && (seconds <= 5 || seconds >= 20)) {
    return 'секунды';
  } else {
    return 'секунд';
  }
};

;// CONCATENATED MODULE: ./src/script/modules/functionTimer.js

const getDeadline = timeDuration => new Date(timeDuration.dataset.timerDeadline).getTime();
const getTimeRemaining = timeRemaining => {
  const seconds = Math.trunc(timeRemaining % 60);
  const minutes = Math.trunc(timeRemaining / 60 % 60);
  const hours = Math.trunc(timeRemaining / 60 / 60 % 24);
  const days = Math.trunc(timeRemaining / 60 / 60 / 24);
  return {
    seconds,
    minutes,
    hours,
    days
  };
};
const isShowDaysOrSeconds = timeRemaining => {
  const timeShowSeconds = document.querySelector('.time__show_seconds');
  const timeShowDays = document.querySelector('.time__show_days');
  if (timeRemaining <= 24 * 60 * 60) {
    timeShowDays.classList.add('display_invisible');
    timeShowSeconds.classList.remove('display_invisible');
  } else {
    timeShowDays.classList.remove('display_invisible');
    timeShowSeconds.classList.add('display_invisible');
  }
};
const isTimerFinished = (timeRemaining, setIntervalId) => {
  if (timeRemaining <= 0) {
    const bannerTime = document.querySelector('.banner__time');
    clearInterval(setIntervalId);
    bannerTime.classList.add('display_invisible');
  }
};
const timerStart = deadline => {
  const timeZoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
  const digitalDay = document.querySelector('.digital__day');
  const digitalHour = document.querySelector('.digital__hour');
  const digitalMinute = document.querySelector('.digital__minute');
  const digitalSecond = document.querySelector('.digital__second');
  const alphaDay = document.querySelector('.alpha__day');
  const alphaHour = document.querySelector('.alpha__hour');
  const alphaMinute = document.querySelector('.alpha__minute');
  const alphaSecond = document.querySelector('.alpha__second');
  const setIntervalId = setInterval(() => {
    const now = Date.now() + timeZoneOffset;
    const timeRemaining = (deadline - now) / 1000;
    const timer = getTimeRemaining(timeRemaining);
    const {
      seconds,
      minutes,
      hours,
      days
    } = timer;
    alphaDay.textContent = getNameDays(days);
    alphaHour.textContent = getNameHours(hours);
    alphaMinute.textContent = getNameMinutes(minutes);
    alphaSecond.textContent = getNameSeconds(seconds);
    digitalDay.textContent = String(days).padStart(2, '0');
    digitalHour.textContent = String(hours).padStart(2, '0');
    digitalMinute.textContent = String(minutes).padStart(2, '0');
    digitalSecond.textContent = String(seconds).padStart(2, '0');
    isShowDaysOrSeconds(timeRemaining);
    isTimerFinished(timeRemaining, setIntervalId);
  }, 1000);
};

;// CONCATENATED MODULE: ./src/script/modules/showNavigation.js
const showNavigation = () => {
  const NAV_TITLE_CATALOG = document.querySelectorAll('.nav__item_catalog .nav__title');
  const NAV_TITLE_BUYER = document.querySelectorAll('.nav__item_buyer .nav__title');
  const CATALOG = document.querySelectorAll('.sublist_catalog');
  const BUYER = document.querySelectorAll('.sublist_buyer');
  NAV_TITLE_CATALOG.forEach((title, ind) => {
    title.addEventListener('click', () => {
      CATALOG[ind].classList.toggle('sublist_show');
    });
  });
  NAV_TITLE_BUYER.forEach((title, ind) => {
    title.addEventListener('click', () => {
      BUYER[ind].classList.toggle('sublist_show');
    });
  });
};
const onClickHeaderBtnMenu = () => {
  const menuBtn = document.querySelector('.menu');
  menuBtn.addEventListener('click', () => {
    document.querySelector('.header-nav').classList.toggle('header-nav_active');
  });
};
;// CONCATENATED MODULE: ./src/script/modules/fetchCard.js

const URL = 'https://determined-painted-hawthorn.glitch.me/api';
const fetchCard_fetchGoods = async param => {
  const response = await fetch(URL + param);
  const data = await response.json();
  return data;
};
const createHrefLink = (path, hash) => {
  const url = new URL(document.location);
  url.pathname = path;
  url.hash = hash;
  return url;
};

;// CONCATENATED MODULE: ./src/script/modules/render.js



const renderMenu = async () => {
  const urlParam = '/category';
  const categoriesData = await fetchCard_fetchGoods(urlParam);
  const catalogeHeader = document.querySelector('.header .sublist_catalog');
  const catalogeFooter = document.querySelector('.footer .sublist_catalog');
  const dataLiHeader = categoriesData.map(item => createMenuItem(item));
  const dataLiFooter = categoriesData.map(item => createMenuItem(item));
  catalogeHeader.append(...dataLiHeader);
  catalogeFooter.append(...dataLiFooter);
};
const renderCatalog = async () => {
  const catalogName = getHashFromURL();
  const urlParam = `/goods/category/${catalogName}`;
  const catalogDate = await fetchGoods(urlParam);
  const {
    list,
    title
  } = createCatalog(catalogDate, catalogName);
  const sectionCatalog = document.querySelector('.catalog__container');
  sectionCatalog.append(title, list);
};
const renderBreadCrumb = category => {
  const breadCrumb = document.querySelector('.nav-breadcrumb');
  breadCrumb.lastElementChild.querySelector('a').textContent = category;
};
const renderPageCard = async () => {
  const [category, goodID] = getHashFromURL().split('#');
  renderBreadCrumb(category);
  const urlParam = `/goods/${goodID}`;
  const dataGood = await fetchGoods(urlParam);
  const {
    titlePage,
    wrapCard,
    titleDescript,
    content
  } = createCard(dataGood);

  // const urlCatalog = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${dataGood.category}`;
  // const dataRecommend = await fetchGoods(urlCatalog);

  const cardContainer = document.querySelector('.good-card');
  cardContainer.append(titlePage, wrapCard, titleDescript, content);

  // const recomContainer = document.querySelector('.recommend');
  // const {titleRecom, wrapRecom} = createRecommend(dataRecommend);
  // recomContainer.append(titleRecom, wrapRecom);

  return dataGood;
};

;// CONCATENATED MODULE: ./src/script/modules/localStorageCart.js
const localStorageCart_addInLocalStorage = data => {
  localStorage.setItem('cart', JSON.stringify(data));
  console.log(data);
};
const localStorageCart_getLocalStorage = () => JSON.parse(localStorage.getItem('cart'));
const localStorageCart_clearLocalStorage = () => {
  localStorage.clear();
};

;// CONCATENATED MODULE: ./src/script/modules/shopControl.js



const CARTLIST = document.querySelector('.cart-list');
const cart = localStorageCart_getLocalStorage() || [];
const addItemInCart = (cart, dataGood) => {
  const indexGoodInCart = cart.findIndex(item => item.id === dataGood.id);
  console.log(dataGood);
  if (indexGoodInCart === -1) {
    cart.push({
      id: dataGood.id,
      count: 1,
      price: dataGood.price,
      discount: dataGood.discount
    });
    addInLocalStorage(cart);
  } else {
    cart[indexGoodInCart].count++;
    addInLocalStorage(cart);
  }
};
const showCountGoodInCart = () => {
  const cart = localStorageCart_getLocalStorage() || [];
  const countInCartBtn = document.querySelector('.btn-cart__count');
  let countInCart = 0;
  cart.forEach(elem => {
    countInCart += Number(elem.count);
  });
  countInCartBtn.textContent = countInCart || '';
};
const addGoodInCart = dataGood => {
  console.log(dataGood);
  const addInCartBtn = document.querySelector('.good-price__btn');
  addInCartBtn.addEventListener('click', () => {
    if (cart.length === 0) {
      cart.push({
        id: dataGood.id,
        count: 1,
        price: dataGood.price,
        discount: dataGood.discount
      });
      addInLocalStorage(cart);
      showCountGoodInCart();
    } else {
      const cart = getLocalStorage();
      addItemInCart(cart, dataGood);
      showCountGoodInCart();
    }
  });
};
const renderCard = ({
  title,
  price,
  image,
  discount,
  category,
  id
}, count) => {
  console.log(image);
  const priceStart = formatPrice(price * count);
  const priceFinal = formatPrice(Math.round(price * count * (100 - discount) / 100));
  const li = document.createElement('li');
  li.className = 'cart-list__item';
  li.dataset.name = id;
  li.insertAdjacentHTML('afterbegin', `
      <div class="cart-list__wrap-input">
        <input class="cart-list__input" type="checkbox" name="" id="">
        <div class="cart-list__img">
          <img  src=https://determined-painted-hawthorn.glitch.me/${image} alt="" >
        </div>
      </div>
            
      <div class="cart-list__info">
        <div class="cart-list__content">
          <a href="card.html#${category}#${id}" class="cart-list__title">${title}</a>
          
        </div>
        <div class="cart-list__count-control count">
          <buton class="count__btn count__btn_minus">−</buton>
          <span class="count__text">${count}</span>
          <buton class="count__btn count__btn_plus">+</buton>
        </div>
        <div class="cart-list__price">          
        </div>
      </div>      
      <button class="cart-list__cart"></button>
  `);
  const cartListPrice = li.querySelector('.cart-list__price');
  if (discount) {
    cartListPrice.insertAdjacentHTML('afterbegin', `<p class="cart-list__priceFinal">${priceFinal} ₽</p>
          <p class="cart-list__priceStart">${priceStart} ₽</p>
          <p class="cart-list__credit">В кредит от 5600 ₽ </p>
    `);
  } else {
    cartListPrice.insertAdjacentHTML('afterbegin', `          
        <p class="cart-list__priceFinal">${priceStart} ₽</p>
          <p class="cart-list__credit">В кредит от 5600 ₽ </p>
    `);
  }
  return li;
};
const createDeliveryImg = ({
  image
}) => {
  const wrapImg = document.createElement('div');
  wrapImg.className = 'delivery__box-img';
  const img = document.createElement('img');
  img.className = 'delivery__img';
  img.src = `https://determined-painted-hawthorn.glitch.me/${image}`;
  wrapImg.append(img);
  return wrapImg;
};
const renderShopPage = () => {
  const cartItems = getLocalStorage() || [];
  console.log(cartItems);
  cartItems.forEach(async item => {
    const url = `https://determined-painted-hawthorn.glitch.me/api/goods/`;
    const data = await fetchGoods(url + item.id);
    const liItem = renderCard(data, item.count);
    CARTLIST.append(liItem);
    const deliveryInfo = document.querySelector('.delivery__info-img');
    const deliveryImg = createDeliveryImg(data);
    deliveryInfo.append(deliveryImg);
  });
};
const makeAllSum = () => {
  const cart = getLocalStorage();
  let count = 0;
  let sum = 0;
  let saleSum = 0;
  cart.forEach(elem => {
    console.log(elem);
    count += elem.count;
    sum += elem.count * elem.price;
    saleSum += (elem.price - Math.round(elem.price * (100 - elem.discount) / 100)) * elem.count;
  });
  const totalSumFinal = document.querySelector('.total__sumFinal');
  const spanCount = document.querySelector('.span__count');
  const totalSumStart = document.querySelector('.total__sumStart');
  const totalSale = document.querySelector('.total__sale');
  totalSumFinal.textContent = formatPrice(String(sum - saleSum)) + ' ₽';
  spanCount.textContent = count;
  totalSale.textContent = formatPrice(String(saleSum)) + ' ₽';
  totalSumStart.textContent = formatPrice(String(sum)) + ' ₽';
  console.warn(count);
  console.warn(sum);
  console.warn(saleSum);
};
const controlCountBtn = () => {
  CARTLIST.addEventListener('click', async ({
    target
  }) => {
    console.log(target);
    if (target.classList.contains('count__btn_plus')) {
      const currentRow = target.closest('.cart-list__item');
      const currentCountBtn = target.previousElementSibling;
      const fieldPriceFinally = currentRow.querySelector('.cart-list__priceFinal');
      const fieldPriceStart = currentRow.querySelector('.cart-list__priceStart');
      const goodID = currentRow.dataset.name;
      const cart = getLocalStorage();
      console.log(cart);
      const indexGoodInCart = cart.findIndex(item => item.id === goodID);
      console.log('index:', indexGoodInCart);
      let count;
      if (currentCountBtn.textContent === '-') {
        count = 1;
      } else {
        count = currentCountBtn.textContent;
        count++;
      }
      currentCountBtn.textContent = count;
      if (indexGoodInCart == '-1') {
        const goodID = currentRow.dataset.name;
        cart.push({
          'id': goodID,
          'count': 1
        });
      } else {
        cart[indexGoodInCart].count = +currentCountBtn.textContent;
      }
      addInLocalStorage(cart);
      const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
      const dataGood = await fetchGoods(url);
      if (dataGood.discount) {
        const price = dataGood.price;
        console.log(price);
        const priceStart = formatPrice(dataGood.price * count);
        const priceFinal = formatPrice(Math.round(dataGood.price * count * (100 - dataGood.discount) / 100));
        fieldPriceFinally.textContent = priceFinal;
        fieldPriceStart.textContent = priceStart;
      } else {
        const price = dataGood.price;
        console.log(price);
        const priceFinal = formatPrice(dataGood.price * count);
        fieldPriceFinally.textContent = priceFinal;
      }
    } else if (target.classList.contains('count__btn_minus')) {
      const currentRow = target.closest('.cart-list__item');
      console.log(currentRow);
      const currentCountBtn = target.nextElementSibling;
      const fieldPriceFinally = currentRow.querySelector('.cart-list__priceFinal');
      const fieldPriceStart = currentRow.querySelector('.cart-list__priceStart');
      let count = currentCountBtn.textContent;
      count--;
      if (count > 0) {
        currentCountBtn.textContent = count;
        const goodID = currentRow.dataset.name;
        const cart = getLocalStorage();
        const indexGoodInCart = cart.findIndex(item => item.id === goodID);
        cart[indexGoodInCart].count = +currentCountBtn.textContent;
        addInLocalStorage(cart);
        const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
        const dataGood = await fetchGoods(url);
        if (dataGood.discount) {
          const price = dataGood.price;
          console.log(price);
          const priceStart = formatPrice(dataGood.price * count);
          const priceFinal = formatPrice(Math.round(dataGood.price * count * (100 - dataGood.discount) / 100));
          fieldPriceFinally.textContent = priceFinal;
          fieldPriceStart.textContent = priceStart;
        } else {
          const price = dataGood.price;
          console.log(price);
          const priceFinal = formatPrice(dataGood.price * count);
          fieldPriceFinally.textContent = priceFinal;
        }
      } else {
        currentCountBtn.textContent = '-';
        const goodID = currentRow.dataset.name;
        const cart = getLocalStorage();
        const indexGoodInCart = cart.findIndex(item => item.id === goodID);
        if (indexGoodInCart >= 0) {
          cart.splice(indexGoodInCart, 1);
          addInLocalStorage(cart);
          fieldPriceFinally.textContent = '';
          fieldPriceStart.textContent = '';
        }
      }
    }
    showCountGoodInCart();
    makeAllSum();
  });
};
const onClickCartDelete = () => {
  document.querySelector('.shop').innerHTML = '';
  renderConfirmDeleteModal();
  delFromImgCart();
  const btnAllDel = document.querySelector('.cart__btn-deleteall');
  btnAllDel.removeEventListener('click', onClickCartDelete);
};
const renderConfirmDeleteModal = () => {
  const div = document.createElement('div');
  div.style.cssText = `
    display: flex;
    top: 50%;
    left: 50%;
    margin: 0 auto;
    height: 200px;
    width: 400px;
    z-index: 100;
    font-size: 32px;
    font-weight: bold;
    border: 2px solid #3670c7;      
    border-radius: 10px;
    justify-content: center;
    align-items: center;
    `;
  div.textContent = 'Корзина очищена';
  document.querySelector('.shop').prepend(div);
  setTimeout(() => {
    div.remove();
  }, 2000);
};
const delFromImgCart = () => {
  document.querySelector('.btn-cart__count').innerHTML = '';
};
const ctrlDeleteAll = () => {
  const btnCheckAll = document.querySelector('.cart__input-checkall');
  btnCheckAll.addEventListener('click', () => {
    if (btnCheckAll.checked) {
      const cartListInput = CARTLIST.querySelectorAll('.cart-list__input');
      cartListInput.forEach(elem => elem.checked = true);
      console.log('true');
      const btnAllDel = document.querySelector('.cart__btn-deleteall');
      btnAllDel.addEventListener('click', onClickCartDelete);
      clearLocalStorage();
    } else {
      console.log('++++');
      const cartListInput = CARTLIST.querySelectorAll('.cart-list__input');
      cartListInput.forEach(elem => elem.checked = false);
    }
  });
};
const shopControl = () => {
  renderShopPage();
  showCountGoodInCart();
  controlCountBtn();
  makeAllSum();
  ctrlDeleteAll();
};

;// CONCATENATED MODULE: ./src/script/index.js





const initTimer = () => {
  const timeDuration = document.querySelector('[data-timer-deadline]');
  if (timeDuration) {
    getTimeInner(timeDuration);
    const deadline = getDeadline(timeDuration);
    timerStart(deadline);
  }
  showNavigation();
  onClickHeaderBtnMenu();
  renderMenu();
  showCountGoodInCart();
};
initTimer();
/******/ })()
;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/script/modules/createElements.js
const getTimeInner = timeDuration => {
  console.log('++++');
  timeDuration.insertAdjacentHTML('afterbegin', ` <p class="time__title">
      До конца акции:
    </p>
    <div class="time__duration">
      <div class="time__show time__show_days">
        <p class="time__digital digital__day"></p>
      <p class="time__alpha alpha__day"></p>
      </div>
      <div class="time__show time__show_hours">
        <p class="time__digital digital__hour"></p>
        <p class="time__alpha alpha__hour"></p>
      </div>
      <div class="time__show time__show_minutes">
        <p class="time__digital digital__minute"></p>
        <p class="time__alpha alpha__minute"></p>
      </div>
      <div class="time__show time__show_seconds">
        <p class="time__digital digital__second"></p><p class="time__alpha alpha__second"></p>
      </div>                        
    </div> `);
  return timeDuration;
};

;// CONCATENATED MODULE: ./src/script/modules/getNames.js
const getNameDays = days => {
  if (days % 10 === 1 && days !== 11) {
    return 'день';
  } else if ((days % 10 === 2 || days % 10 === 3 || days % 10 === 4) && (days <= 5 || days >= 20)) {
    return 'дня';
  } else {
    return 'дней';
  }
};
const getNameHours = hours => {
  if (hours === 1 || hours === 21) {
    return 'час';
  } else if (hours >= 5 && hours <= 20 || hours % 10 === 0) {
    return 'часов';
  } else {
    return 'часа';
  }
};
const getNameMinutes = minutes => {
  if (minutes % 10 === 1 && minutes !== 11) {
    return 'минута';
  } else if ((minutes % 10 === 2 || minutes % 10 === 3 || minutes % 10 === 4) && (minutes <= 5 || minutes >= 20)) {
    return 'минуты';
  } else {
    return 'минут';
  }
};
const getNameSeconds = seconds => {
  if (seconds % 10 === 1 && seconds !== 11) {
    return 'секунда';
  } else if ((seconds % 10 === 2 || seconds % 10 === 3 || seconds % 10 === 4) && (seconds <= 5 || seconds >= 20)) {
    return 'секунды';
  } else {
    return 'секунд';
  }
};

;// CONCATENATED MODULE: ./src/script/modules/functionTimer.js

const getDeadline = timeDuration => new Date(timeDuration.dataset.timerDeadline).getTime();
const getTimeRemaining = timeRemaining => {
  const seconds = Math.trunc(timeRemaining % 60);
  const minutes = Math.trunc(timeRemaining / 60 % 60);
  const hours = Math.trunc(timeRemaining / 60 / 60 % 24);
  const days = Math.trunc(timeRemaining / 60 / 60 / 24);
  return {
    seconds,
    minutes,
    hours,
    days
  };
};
const isShowDaysOrSeconds = timeRemaining => {
  const timeShowSeconds = document.querySelector('.time__show_seconds');
  const timeShowDays = document.querySelector('.time__show_days');
  if (timeRemaining <= 24 * 60 * 60) {
    timeShowDays.classList.add('display_invisible');
    timeShowSeconds.classList.remove('display_invisible');
  } else {
    timeShowDays.classList.remove('display_invisible');
    timeShowSeconds.classList.add('display_invisible');
  }
};
const isTimerFinished = (timeRemaining, setIntervalId) => {
  if (timeRemaining <= 0) {
    const bannerTime = document.querySelector('.banner__time');
    clearInterval(setIntervalId);
    bannerTime.classList.add('display_invisible');
  }
};
const timerStart = deadline => {
  const timeZoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
  const digitalDay = document.querySelector('.digital__day');
  const digitalHour = document.querySelector('.digital__hour');
  const digitalMinute = document.querySelector('.digital__minute');
  const digitalSecond = document.querySelector('.digital__second');
  const alphaDay = document.querySelector('.alpha__day');
  const alphaHour = document.querySelector('.alpha__hour');
  const alphaMinute = document.querySelector('.alpha__minute');
  const alphaSecond = document.querySelector('.alpha__second');
  const setIntervalId = setInterval(() => {
    const now = Date.now() + timeZoneOffset;
    const timeRemaining = (deadline - now) / 1000;
    const timer = getTimeRemaining(timeRemaining);
    const {
      seconds,
      minutes,
      hours,
      days
    } = timer;
    alphaDay.textContent = getNameDays(days);
    alphaHour.textContent = getNameHours(hours);
    alphaMinute.textContent = getNameMinutes(minutes);
    alphaSecond.textContent = getNameSeconds(seconds);
    digitalDay.textContent = String(days).padStart(2, '0');
    digitalHour.textContent = String(hours).padStart(2, '0');
    digitalMinute.textContent = String(minutes).padStart(2, '0');
    digitalSecond.textContent = String(seconds).padStart(2, '0');
    isShowDaysOrSeconds(timeRemaining);
    isTimerFinished(timeRemaining, setIntervalId);
  }, 1000);
};

;// CONCATENATED MODULE: ./src/script/modules/showNavigation.js
const showNavigation = () => {
  console.log('SHOW MUST GO ON!');
  const navFooter = document.querySelector('.navFooter');
  const navTitleCatalog = navFooter.querySelector('.nav__item_catalog').firstElementChild;
  const navTitleBuyer = navFooter.querySelector('.nav__item_buyer').firstElementChild;
  const catalog = navFooter.querySelector('.sublist_catalog');
  const buyer = navFooter.querySelector('.sublist_buyer');
  navTitleCatalog.addEventListener('click', () => {
    catalog.classList.toggle('sublist_show');
    const btnCatalog = navTitleCatalog.querySelector('.nav__btn');
    btnCatalog.classList.toggle('nav__btn_open');
  });
  navTitleBuyer.addEventListener('click', () => {
    buyer.classList.toggle('sublist_show');
    const btnBuyer = navTitleBuyer.querySelector('.nav__btn');
    btnBuyer.classList.toggle('nav__btn_open');
  });
};
const showHeaderMenu = () => {
  const menuBtn = document.querySelector('.menu');
  menuBtn.addEventListener('click', () => {
    document.querySelector('.header-nav').classList.toggle('header-nav_active');
  });
};
;// CONCATENATED MODULE: ./src/script/modules/fetchCard.js

const fetchGoods = async url => {
  const response = await fetch(url);
  const data = await response.json();
  return data;
};
const createHrefLink = (path, hash) => {
  const url = new URL(document.location);
  url.pathname = path;
  url.hash = hash;
  return url;
};
const createMenuItem = item => {
  const liItem = document.createElement('li');
  liItem.className = 'sublist__item';
  const link = document.createElement('a');
  link.className = 'sublist__link';
  const path = 'catalog.html';
  const hash = `#${item}`;
  const href = createHrefLink(path, hash);
  link.href = href;
  link.textContent = item;
  liItem.append(link);
  return liItem;
};
const renderMenu = async () => {
  const url = 'https://determined-painted-hawthorn.glitch.me/api/category';
  const categoriesData = await fetchGoods(url);
  const catalogeHeader = document.querySelector('.header .sublist_catalog');
  const catalogeFooter = document.querySelector('.footer .sublist_catalog');
  const dataLiHeader = categoriesData.map(item => createMenuItem(item));
  const dataLiFooter = categoriesData.map(item => createMenuItem(item));
  catalogeHeader.append(...dataLiHeader);
  catalogeFooter.append(...dataLiFooter);
};
const getHashFromURL = () => {
  const url = decodeURI(document.location.hash);
  return url.slice(1);
};
const renderCatalog = async () => {
  const catalogName = getHashFromURL();
  const title = createTitle('catalog__title', catalogName);
  const url = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${catalogName}`;
  const catalogDate = await fetchGoods(url);
  const catalog = createCatalog(catalogDate);
  const sectionCatalog = document.querySelector('.catalog__container');
  sectionCatalog.append(title, catalog);
};
const renderPageCard = async () => {
  const [category, goodID] = getHashFromURL().split('#');
  createBreadCrumb(category);
  const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
  console.log(url);
  const dataGood = await fetchGoods(url);
  const title = createTitle('good-card__title', dataGood.title);
  const cart = createCart(dataGood);
  const img = createImgCard(dataGood);
  const wrapCard = createElemWithClass('div', 'good-card__wrap');
  wrapCard.append(img, cart);
  const {
    title: titleDescript,
    content
  } = createDescript(dataGood);
  const urlCatalog = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${dataGood.category}`;
  const dataRecommend = await fetchGoods(urlCatalog);
  const cardContainer = document.querySelector('.good-card');
  cardContainer.append(title, wrapCard, titleDescript, content);
  const recomContainer = document.querySelector('.recommend');
  const {
    titleRecom,
    wrapRecom
  } = createRecommend(dataRecommend);
  recomContainer.append(titleRecom, wrapRecom);
  return dataGood;
};

;// CONCATENATED MODULE: ./src/script/index.js




const initTimer = () => {
  const timeDuration = document.querySelector('[data-timer-deadline]');
  if (timeDuration) {
    getTimeInner(timeDuration);
    const deadline = getDeadline(timeDuration);
    timerStart(deadline);
  }
  showNavigation();
  showHeaderMenu();
  renderMenu();
};
initTimer();
/******/ })()
;
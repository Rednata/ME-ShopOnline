/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/script/modules/createElementsBlog.js

// ===================== BLOG ==========================

const headerPage = document.querySelector('.header');
// const footerPage = document.querySelector('.footer');
const mainPage = document.querySelector('main');
const createSection = () => {
  const section = document.createElement('section');
  section.classList.add('section', 'container');
  return section;
};
const createUl = () => {
  const ul = document.createElement('ul');
  ul.classList.add('blog');
  return ul;
};
const createPost = ({
  title,
  id
}) => {
  const li = document.createElement('li');
  li.classList.add('blog-item');

  // const linkPost = `article.html?id=${id}`;
  li.insertAdjacentHTML('afterbegin', `
        <a class="blog-item__link" href="article.html?id=${id}" target="_blank">

        <picture>
          <source srcset="assets/images/Rectangle.avif" type="image/avif">
          <source srcset="assets/images/Rectangle.webp" type="image/webp">
          <img class="blog-item__image" src="./assets/images/Rectangle.jpg" alt="">
        </picture>

          
        </a> 
        <div class="blog-item__content">
          <a class="blog-item__link" href="article.html?id=${id}" target="_blank">
            <h2 class="blog-item__title">${title}</h2>
          </a>

          <div class="info">
          <span class="info__date">22 октября 2021, 12:45</span>
          <div class="info-wrap">
            <div class="info__view">
              <span class="info__img info__img_view"></span>
              <p class="info__count">1.2K</p>              
            </div>
            <div class="info__comments">
              <span class="info__img info__img_comments"></span>
              <p class="info__count">0</p>              
            </div>
          </div>
          </div>          

        </div>  
      `);
  return li;
};
const renderPost = postList => {
  const data = postList.map(post => createPost(post));
  return data;
};

// ================  PAGINATION  ========================
const createPaginationWrap = () => {
  const paginationWrap = document.createElement('div');
  paginationWrap.classList.add('pagination');
  paginationWrap.insertAdjacentHTML('afterbegin', `    
        <a class="arrow arrow_left"></a>
        <div class="pagination-group">
        </div>
        <a class="arrow arrow_right"></a>    
      `);
  return paginationWrap;
};
const createElementsBlog_createPaginationNumber = (paginationWrap, currentPage, startPage) => {
  startPage ||= currentPage;
  const pagination = paginationWrap.querySelector('.pagination-group');
  pagination.innerHTML = '';
  const pages = [];
  for (let i = startPage; i < startPage + 3; i++) {
    const link = document.createElement('a');
    link.className = 'pagination__page';
    if (i === currentPage) {
      link.classList.add('active');
    }
    link.setAttribute('data-number', `${i}`);
    link.href = `blog.html?page=${i}`;
    link.textContent = i;
    pages.push(link);
  }
  pagination.append(...pages);
  return pagination;
};
const createElementsBlog_createBlogPage = (postList, currentPage) => {
  const section = createSection();
  const blog = createUl();
  blog.append(...renderPost(postList.data));
  section.append(blog);
  const breadcrumb = document.createElement('div');
  breadcrumb.classList.add('bread');
  breadcrumb.insertAdjacentHTML('afterbegin', `<ul class="nav-breadcrumb">
          <li class="nav-breadcrumb__li">
            <a class="nav-breadcrumb__main" href="index.html">Главная</a>
          </li>
          <li class="nav-breadcrumb__li">
            <a class="goBlog" href="blog.html">Блог</a>
          </li>           
        </ul>
      `);
  headerPage.append(breadcrumb);
  const paginationWrap = createPaginationWrap();
  const pagination = createElementsBlog_createPaginationNumber(paginationWrap, currentPage);
  section.append(paginationWrap);
  mainPage.append(section);
  return {
    pagination
  };
};

// ============  ARTICLE ================
const articleWrap = document.createElement('div');
articleWrap.classList.add('articleWrap', 'container');
const createHeader = title => {
  const breadcrumb = document.createElement('div');
  breadcrumb.classList.add('bread');
  breadcrumb.insertAdjacentHTML('afterbegin', `<ul class="nav-breadcrumb">
          <li class="nav-breadcrumb__li">
            <a class="nav-breadcrumb__main" href="index.html">Главная</a>
          </li>
          <li class="nav-breadcrumb__li">
            <a class="goBlog" href="blog.html">Блог</a>
          </li>
          <li class="nav-breadcrumb__li nav-breadcrumb__title">${title}
          </li>      
        </ul>
      `);
  return breadcrumb;
};
const createMain = (title, body) => {
  const section = document.createElement('section');
  section.insertAdjacentHTML('afterbegin', `
        <article class="article">
          <h1 class="title article__title">${title}</h1>
          <p class="article__text">${body}</p>
        </article>
      `);
  return section;
};
const createAside = () => {
  const aside = document.createElement('aside');
  aside.className = 'aside';
  aside.insertAdjacentHTML('afterbegin', `
        <img src="assets/images/add.jpg" alt="" class="article__img">
        <img src="assets/images/add.jpg" alt="" class="article__img">
      `);
  return aside;
};
const createFooter = author => {
  const nameAuthor = author.data.name || '';
  const footer = document.createElement('footer');
  footer.classList.add('footer-article');
  footer.insertAdjacentHTML('afterbegin', `
        <a class="footer-article__back" href="blog.html">К списку статей</a>
          <div class="footer-article__about">
          <div class="footer-article__author">
            ${nameAuthor}
          </div>

          <div class="info info_article">
          <span class="info__date">22 октября 2021, 12:45</span>
          <div class="info-wrap">
            <div class="info__view">
              <span class="info__img info__img_view"></span>
              <p class="info__count">1.2K</p>              
            </div>
            <div class="info__comments">
              <span class="info__img info__img_comments"></span>
              <p class="info__count">0</p>              
            </div>
          </div>
          </div> 
          
        </div>
      `);
  // const main = document.querySelector('.main');
  // mainPage.append(footer);
  articleWrap.append(footer);
};
const createArticlePage = articleData => {
  const {
    title,
    body,
    user_id
  } = articleData;
  const header = createHeader(title);
  const section = createMain(title, body);
  const aside = createAside();
  loadAuthor(user_id);

  // console.log('footer: ', footer);

  articleWrap.append(aside, section);
  headerPage.append(header);
  mainPage.append(articleWrap);
};

;// CONCATENATED MODULE: ./src/script/modules/paginationFunc.js

const getStartPage = pagination => +pagination.firstElementChild.dataset.number;
const changePageNumber = (paginationWrap, startPage, currentPage, arrowDirect) => {
  if (arrowDirect === 'left') {
    if (startPage <= 1) {
      createPaginationNumber(paginationWrap, currentPage, 1);
    } else {
      createPaginationNumber(paginationWrap, currentPage, startPage - 1);
    }
  } else {
    createPaginationNumber(paginationWrap, currentPage, startPage + 1);
  }
};
const paginationFunc_onClickArrow = queryParams => {
  const paginationWrap = document.querySelector('.pagination');
  const pagination = document.querySelector('.pagination-group');
  paginationWrap.addEventListener('click', e => {
    if (e.target.closest('.arrow_left')) {
      e.preventDefault();
      const startPage = getStartPage(pagination);
      const currentPage = +queryParams.slice(6);
      changePageNumber(paginationWrap, startPage, currentPage, 'left');
    }
    if (e.target.closest('.arrow_right')) {
      e.preventDefault();
      const startPage = getStartPage(pagination);
      const currentPage = +queryParams.slice(6);
      changePageNumber(paginationWrap, startPage, currentPage, 'right');
    }
  });
};

;// CONCATENATED MODULE: ./src/script/modules/fetch.js


const loadPosts = async currentPage => {
  // document.body.innerHTML = '';

  const url = new URL(window.location);
  const queryParams = url.search;
  currentPage = +queryParams.slice(6) || 1;
  const response = await fetch(`https://gorest.co.in/public-api/posts${queryParams}`);
  const postList = await response.json();
  createBlogPage(postList, currentPage);
  onClickArrow(queryParams);
};
const loadArticle = async () => {
  const url = new URL(window.location);
  const queryParams = url.search.slice(4);
  const response = await fetch(`https://gorest.co.in/public-api/posts/${queryParams}`);
  const articleData = await response.json();
  createArticlePage(articleData.data);
};
const loadAuthor = async userID => {
  const response = await fetch(`https://gorest.co.in/public-api/users/${userID}`);
  const author = await response.json();
  createFooter(author);
};

;// CONCATENATED MODULE: ./src/script/modules/showNavigation.js
const showNavigation = () => {
  console.log('SHOW MUST GO ON!');
  const navFooter = document.querySelector('.navFooter');
  const navTitleCatalog = navFooter.querySelector('.nav__item_catalog').firstElementChild;
  const navTitleBuyer = navFooter.querySelector('.nav__item_buyer').firstElementChild;
  const catalog = navFooter.querySelector('.sublist_catalog');
  const buyer = navFooter.querySelector('.sublist_buyer');
  navTitleCatalog.addEventListener('click', () => {
    catalog.classList.toggle('sublist_show');
    const btnCatalog = navTitleCatalog.querySelector('.nav__btn');
    btnCatalog.classList.toggle('nav__btn_open');
  });
  navTitleBuyer.addEventListener('click', () => {
    buyer.classList.toggle('sublist_show');
    const btnBuyer = navTitleBuyer.querySelector('.nav__btn');
    btnBuyer.classList.toggle('nav__btn_open');
  });
};
const showHeaderMenu = () => {
  const menuBtn = document.querySelector('.menu');
  menuBtn.addEventListener('click', () => {
    document.querySelector('.header-nav').classList.toggle('header-nav_active');
  });
};
;// CONCATENATED MODULE: ./src/script/modules/fetchCard.js

const fetchCard_fetchGoods = async url => {
  const response = await fetch(url);
  const data = await response.json();
  return data;
};
const createHrefLink = (path, hash) => {
  const url = new URL(document.location);
  url.pathname = path;
  url.hash = hash;
  return url;
};
const createMenuItem = item => {
  const liItem = document.createElement('li');
  liItem.className = 'sublist__item';
  const link = document.createElement('a');
  link.className = 'sublist__link';
  link.textContent = item;
  liItem.append(link);
  link.href = `/catalog.html#${item}`;
  link.target = '_blank';
  return liItem;
};
const renderMenu = async () => {
  const url = 'https://determined-painted-hawthorn.glitch.me/api/category';
  const categoriesData = await fetchCard_fetchGoods(url);
  const catalogeHeader = document.querySelector('.header .sublist_catalog');
  const catalogeFooter = document.querySelector('.footer .sublist_catalog');
  const dataLiHeader = categoriesData.map(item => createMenuItem(item));
  const dataLiFooter = categoriesData.map(item => createMenuItem(item));
  catalogeHeader.append(...dataLiHeader);
  catalogeFooter.append(...dataLiFooter);
};
const getHashFromURL = () => {
  const url = decodeURI(document.location.hash);
  return url.slice(1);
};
const renderCatalog = async () => {
  const catalogName = getHashFromURL();
  console.log('catalogName: ', catalogName);
  const title = createTitle('catalog__title', catalogName);
  const url = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${catalogName}`;
  const catalogDate = await fetchCard_fetchGoods(url);
  console.log(catalogDate);
  const catalog = createCatalog(catalogDate);
  const sectionCatalog = document.querySelector('.catalog__container');
  sectionCatalog.append(title, catalog);
};
const renderPageCard = async () => {
  const [category, goodID] = getHashFromURL().split('#');
  createBreadCrumb(category);
  const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
  const dataGood = await fetchCard_fetchGoods(url);
  const title = createTitle('good-card__title', dataGood.title);
  const cart = createCart(dataGood);
  const img = createImgCard(dataGood);
  const wrapCard = createElemWithClass('div', 'good-card__wrap');
  wrapCard.append(img, cart);
  const {
    title: titleDescript,
    content
  } = createDescript(dataGood);
  const urlCatalog = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${dataGood.category}`;
  const dataRecommend = await fetchCard_fetchGoods(urlCatalog);
  const cardContainer = document.querySelector('.good-card');
  cardContainer.append(title, wrapCard, titleDescript, content);
  const recomContainer = document.querySelector('.recommend');
  const {
    titleRecom,
    wrapRecom
  } = createRecommend(dataRecommend);
  recomContainer.append(titleRecom, wrapRecom);
  return dataGood;
};

;// CONCATENATED MODULE: ./src/script/modules/localStorageCart.js
const localStorageCart_addInLocalStorage = data => {
  localStorage.setItem('cart', JSON.stringify(data));
  console.log(data);
};
const localStorageCart_getLocalStorage = () => JSON.parse(localStorage.getItem('cart'));
const localStorageCart_clearLocalStorage = () => {
  localStorage.clear();
};

;// CONCATENATED MODULE: ./src/script/modules/shopControl.js



const CARTLIST = document.querySelector('.cart-list');
const cart = localStorageCart_getLocalStorage() || [];
const addItemInCart = (cart, dataGood) => {
  const indexGoodInCart = cart.findIndex(item => item.id === dataGood.id);
  console.log(dataGood);
  if (indexGoodInCart === -1) {
    cart.push({
      id: dataGood.id,
      count: 1,
      price: dataGood.price,
      discount: dataGood.discount
    });
    addInLocalStorage(cart);
  } else {
    cart[indexGoodInCart].count++;
    addInLocalStorage(cart);
  }
};
const showCountGoodInCart = () => {
  const cart = localStorageCart_getLocalStorage() || [];
  const countInCartBtn = document.querySelector('.btn-cart__count');
  let countInCart = 0;
  cart.forEach(elem => {
    countInCart += Number(elem.count);
  });
  countInCartBtn.textContent = countInCart || '';
};
const addGoodInCart = dataGood => {
  console.log(dataGood);
  const addInCartBtn = document.querySelector('.good-price__btn');
  addInCartBtn.addEventListener('click', () => {
    if (cart.length === 0) {
      cart.push({
        id: dataGood.id,
        count: 1,
        price: dataGood.price,
        discount: dataGood.discount
      });
      addInLocalStorage(cart);
      showCountGoodInCart();
    } else {
      const cart = getLocalStorage();
      addItemInCart(cart, dataGood);
      showCountGoodInCart();
    }
  });
};
const renderCard = ({
  title,
  price,
  image,
  discount,
  category,
  id
}, count) => {
  console.log(image);
  const priceStart = formatCartPrice(price * count);
  const priceFinal = formatCartPrice(Math.round(price * count * (100 - discount) / 100));
  const li = document.createElement('li');
  li.className = 'cart-list__item';
  li.dataset.name = id;
  li.insertAdjacentHTML('afterbegin', `
      <div class="cart-list__wrap-input">
        <input class="cart-list__input" type="checkbox" name="" id="">
        <div class="cart-list__img">
          <img  src=https://determined-painted-hawthorn.glitch.me/${image} alt="" >
        </div>
      </div>
            
      <div class="cart-list__info">
        <div class="cart-list__content">
          <a href="card.html#${category}#${id}" class="cart-list__title">${title}</a>
          
        </div>
        <div class="cart-list__count-control count">
          <buton class="count__btn count__btn_minus">−</buton>
          <span class="count__text">${count}</span>
          <buton class="count__btn count__btn_plus">+</buton>
        </div>
        <div class="cart-list__price">          
        </div>
      </div>      
      <button class="cart-list__cart"></button>
  `);
  const cartListPrice = li.querySelector('.cart-list__price');
  if (discount) {
    cartListPrice.insertAdjacentHTML('afterbegin', `<p class="cart-list__priceFinal">${priceFinal} ₽</p>
          <p class="cart-list__priceStart">${priceStart} ₽</p>
          <p class="cart-list__credit">В кредит от 5600 ₽ </p>
    `);
  } else {
    cartListPrice.insertAdjacentHTML('afterbegin', `          
        <p class="cart-list__priceFinal">${priceStart} ₽</p>
          <p class="cart-list__credit">В кредит от 5600 ₽ </p>
    `);
  }
  return li;
};
const createDeliveryImg = ({
  image
}) => {
  const wrapImg = document.createElement('div');
  wrapImg.className = 'delivery__box-img';
  const img = document.createElement('img');
  img.className = 'delivery__img';
  img.src = `https://determined-painted-hawthorn.glitch.me/${image}`;
  wrapImg.append(img);
  return wrapImg;
};
const renderShopPage = () => {
  const cartItems = getLocalStorage() || [];
  console.log(cartItems);
  cartItems.forEach(async item => {
    const url = `https://determined-painted-hawthorn.glitch.me/api/goods/`;
    const data = await fetchGoods(url + item.id);
    const liItem = renderCard(data, item.count);
    CARTLIST.append(liItem);
    const deliveryInfo = document.querySelector('.delivery__info-img');
    const deliveryImg = createDeliveryImg(data);
    deliveryInfo.append(deliveryImg);
  });
};
const makeAllSum = () => {
  const cart = getLocalStorage();
  let count = 0;
  let sum = 0;
  let saleSum = 0;
  cart.forEach(elem => {
    console.log(elem);
    count += elem.count;
    sum += elem.count * elem.price;
    saleSum += (elem.price - Math.round(elem.price * (100 - elem.discount) / 100)) * elem.count;
  });
  const totalSumFinal = document.querySelector('.total__sumFinal');
  const spanCount = document.querySelector('.span__count');
  const totalSumStart = document.querySelector('.total__sumStart');
  const totalSale = document.querySelector('.total__sale');
  totalSumFinal.textContent = formatCartPrice(String(sum - saleSum)) + ' ₽';
  spanCount.textContent = count;
  totalSale.textContent = formatCartPrice(String(saleSum)) + ' ₽';
  totalSumStart.textContent = formatCartPrice(String(sum)) + ' ₽';
  console.warn(count);
  console.warn(sum);
  console.warn(saleSum);
};
const controlCountBtn = () => {
  CARTLIST.addEventListener('click', async ({
    target
  }) => {
    console.log(target);
    if (target.classList.contains('count__btn_plus')) {
      const currentRow = target.closest('.cart-list__item');
      const currentCountBtn = target.previousElementSibling;
      const fieldPriceFinally = currentRow.querySelector('.cart-list__priceFinal');
      const fieldPriceStart = currentRow.querySelector('.cart-list__priceStart');
      const goodID = currentRow.dataset.name;
      const cart = getLocalStorage();
      console.log(cart);
      const indexGoodInCart = cart.findIndex(item => item.id === goodID);
      console.log('index:', indexGoodInCart);
      let count;
      if (currentCountBtn.textContent === '-') {
        count = 1;
      } else {
        count = currentCountBtn.textContent;
        count++;
      }
      currentCountBtn.textContent = count;
      if (indexGoodInCart == '-1') {
        const goodID = currentRow.dataset.name;
        cart.push({
          'id': goodID,
          'count': 1
        });
      } else {
        cart[indexGoodInCart].count = +currentCountBtn.textContent;
      }
      addInLocalStorage(cart);
      const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
      const dataGood = await fetchGoods(url);
      if (dataGood.discount) {
        const price = dataGood.price;
        console.log(price);
        const priceStart = formatCartPrice(dataGood.price * count);
        const priceFinal = formatCartPrice(Math.round(dataGood.price * count * (100 - dataGood.discount) / 100));
        fieldPriceFinally.textContent = priceFinal;
        fieldPriceStart.textContent = priceStart;
      } else {
        const price = dataGood.price;
        console.log(price);
        const priceFinal = formatCartPrice(dataGood.price * count);
        fieldPriceFinally.textContent = priceFinal;
      }
    } else if (target.classList.contains('count__btn_minus')) {
      const currentRow = target.closest('.cart-list__item');
      console.log(currentRow);
      const currentCountBtn = target.nextElementSibling;
      const fieldPriceFinally = currentRow.querySelector('.cart-list__priceFinal');
      const fieldPriceStart = currentRow.querySelector('.cart-list__priceStart');
      let count = currentCountBtn.textContent;
      count--;
      if (count > 0) {
        currentCountBtn.textContent = count;
        const goodID = currentRow.dataset.name;
        const cart = getLocalStorage();
        const indexGoodInCart = cart.findIndex(item => item.id === goodID);
        cart[indexGoodInCart].count = +currentCountBtn.textContent;
        addInLocalStorage(cart);
        const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
        const dataGood = await fetchGoods(url);
        if (dataGood.discount) {
          const price = dataGood.price;
          console.log(price);
          const priceStart = formatCartPrice(dataGood.price * count);
          const priceFinal = formatCartPrice(Math.round(dataGood.price * count * (100 - dataGood.discount) / 100));
          fieldPriceFinally.textContent = priceFinal;
          fieldPriceStart.textContent = priceStart;
        } else {
          const price = dataGood.price;
          console.log(price);
          const priceFinal = formatCartPrice(dataGood.price * count);
          fieldPriceFinally.textContent = priceFinal;
        }
      } else {
        currentCountBtn.textContent = '-';
        const goodID = currentRow.dataset.name;
        const cart = getLocalStorage();
        const indexGoodInCart = cart.findIndex(item => item.id === goodID);
        if (indexGoodInCart >= 0) {
          cart.splice(indexGoodInCart, 1);
          addInLocalStorage(cart);
          fieldPriceFinally.textContent = '';
          fieldPriceStart.textContent = '';
        }
      }
    }
    showCountGoodInCart();
    makeAllSum();
  });
};
const onClickCartDelete = () => {
  document.querySelector('.shop').innerHTML = '';
  renderConfirmDeleteModal();
  delFromImgCart();
  const btnAllDel = document.querySelector('.cart__btn-deleteall');
  btnAllDel.removeEventListener('click', onClickCartDelete);
};
const renderConfirmDeleteModal = () => {
  const div = document.createElement('div');
  div.style.cssText = `
    display: flex;
    top: 50%;
    left: 50%;
    margin: 0 auto;
    height: 200px;
    width: 400px;
    z-index: 100;
    font-size: 32px;
    font-weight: bold;
    border: 2px solid #3670c7;      
    border-radius: 10px;
    justify-content: center;
    align-items: center;
    `;
  div.textContent = 'Корзина очищена';
  document.querySelector('.shop').prepend(div);
  setTimeout(() => {
    div.remove();
  }, 2000);
};
const delFromImgCart = () => {
  document.querySelector('.btn-cart__count').innerHTML = '';
};
const ctrlDeleteAll = () => {
  const btnCheckAll = document.querySelector('.cart__input-checkall');
  btnCheckAll.addEventListener('click', () => {
    if (btnCheckAll.checked) {
      const cartListInput = CARTLIST.querySelectorAll('.cart-list__input');
      cartListInput.forEach(elem => elem.checked = true);
      console.log('true');
      const btnAllDel = document.querySelector('.cart__btn-deleteall');
      btnAllDel.addEventListener('click', onClickCartDelete);
      clearLocalStorage();
    } else {
      console.log('++++');
      const cartListInput = CARTLIST.querySelectorAll('.cart-list__input');
      cartListInput.forEach(elem => elem.checked = false);
    }
  });
};
const shopControl = () => {
  renderShopPage();
  showCountGoodInCart();
  controlCountBtn();
  makeAllSum();
  ctrlDeleteAll();
};

;// CONCATENATED MODULE: ./src/script/article.js




const init = () => {
  loadArticle();
  showNavigation();
  showHeaderMenu();
  renderMenu();
  showCountGoodInCart();
};
init();
/******/ })()
;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/script/modules/showNavigation.js
const showNavigation = () => {
  console.log('SHOW MUST GO ON!');
  const navFooter = document.querySelector('.navFooter');
  const navTitleCatalog = navFooter.querySelector('.nav__item_catalog').firstElementChild;
  const navTitleBuyer = navFooter.querySelector('.nav__item_buyer').firstElementChild;
  const catalog = navFooter.querySelector('.sublist_catalog');
  const buyer = navFooter.querySelector('.sublist_buyer');
  navTitleCatalog.addEventListener('click', () => {
    catalog.classList.toggle('sublist_show');
    const btnCatalog = navTitleCatalog.querySelector('.nav__btn');
    btnCatalog.classList.toggle('nav__btn_open');
  });
  navTitleBuyer.addEventListener('click', () => {
    buyer.classList.toggle('sublist_show');
    const btnBuyer = navTitleBuyer.querySelector('.nav__btn');
    btnBuyer.classList.toggle('nav__btn_open');
  });
};
const showHeaderMenu = () => {
  const menuBtn = document.querySelector('.menu');
  menuBtn.addEventListener('click', () => {
    document.querySelector('.header-nav').classList.toggle('header-nav_active');
  });
};
;// CONCATENATED MODULE: ./src/script/modules/fetchCard.js

const fetchGoods = async url => {
  const response = await fetch(url);
  const data = await response.json();
  return data;
};
const createHrefLink = (path, hash) => {
  const url = new URL(document.location);
  url.pathname = path;
  url.hash = hash;
  return url;
};
const createMenuItem = item => {
  const liItem = document.createElement('li');
  liItem.className = 'sublist__item';
  const link = document.createElement('a');
  link.className = 'sublist__link';
  link.textContent = item;
  liItem.append(link);
  link.href = `/catalog.html#${item}`;
  link.target = '_blank';
  return liItem;
};
const renderMenu = async () => {
  const url = 'https://determined-painted-hawthorn.glitch.me/api/category';
  const categoriesData = await fetchGoods(url);
  const catalogeHeader = document.querySelector('.header .sublist_catalog');
  const catalogeFooter = document.querySelector('.footer .sublist_catalog');
  const dataLiHeader = categoriesData.map(item => createMenuItem(item));
  const dataLiFooter = categoriesData.map(item => createMenuItem(item));
  catalogeHeader.append(...dataLiHeader);
  catalogeFooter.append(...dataLiFooter);
};
const getHashFromURL = () => {
  const url = decodeURI(document.location.hash);
  return url.slice(1);
};
const renderCatalog = async () => {
  const catalogName = getHashFromURL();
  console.log('catalogName: ', catalogName);
  const title = createTitle('catalog__title', catalogName);
  const url = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${catalogName}`;
  const catalogDate = await fetchGoods(url);
  console.log(catalogDate);
  const catalog = createCatalog(catalogDate);
  const sectionCatalog = document.querySelector('.catalog__container');
  sectionCatalog.append(title, catalog);
};
const renderPageCard = async () => {
  const [category, goodID] = getHashFromURL().split('#');
  createBreadCrumb(category);
  const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
  const dataGood = await fetchGoods(url);
  const title = createTitle('good-card__title', dataGood.title);
  const cart = createCart(dataGood);
  const img = createImgCard(dataGood);
  const wrapCard = createElemWithClass('div', 'good-card__wrap');
  wrapCard.append(img, cart);
  const {
    title: titleDescript,
    content
  } = createDescript(dataGood);
  const urlCatalog = `https://determined-painted-hawthorn.glitch.me/api/goods/category/${dataGood.category}`;
  const dataRecommend = await fetchGoods(urlCatalog);
  const cardContainer = document.querySelector('.good-card');
  cardContainer.append(title, wrapCard, titleDescript, content);
  const recomContainer = document.querySelector('.recommend');
  const {
    titleRecom,
    wrapRecom
  } = createRecommend(dataRecommend);
  recomContainer.append(titleRecom, wrapRecom);
  return dataGood;
};

;// CONCATENATED MODULE: ./src/script/modules/localStorageCart.js
const localStorageCart_addInLocalStorage = data => {
  localStorage.setItem('cart', JSON.stringify(data));
  console.log(data);
};
const localStorageCart_getLocalStorage = () => JSON.parse(localStorage.getItem('cart'));
const clearLocalStorage = () => {
  localStorage.clear();
};

;// CONCATENATED MODULE: ./src/script/modules/createCatalog&Cards.js

const createCatalog_Cards_createElemWithClass = (elem, className) => {
  const elemClass = document.createElement(elem);
  elemClass.className = className;
  return elemClass;
};
const createSaleIcon = (tegName, className, discount) => {
  const spanSale = createCatalog_Cards_createElemWithClass(tegName, className);
  spanSale.textContent = `-${discount}%`;
  return spanSale;
};
const createCatalogItem = ({
  id,
  price,
  title,
  image,
  discount,
  category
}) => {
  const li = createCatalog_Cards_createElemWithClass('li', 'benefit__item card');
  li.dataset.name = id;
  const href = `/card.html#${category}#${id}`;
  const link = createCatalog_Cards_createElemWithClass('a', 'benefit__link');
  link.target = '_blank';
  link.href = href;
  const wrapIMG = createCatalog_Cards_createElemWithClass('div', 'card-img__wrapper');
  const img = createCatalog_Cards_createElemWithClass('img', 'card__img');
  img.loading = 'lazy';
  img.width = '420';
  img.height = '295';
  if (image === 'image/notimage.jpg') {
    img.src = 'assets/images/no-photo.jpg';
  } else {
    img.src = `https://determined-painted-hawthorn.glitch.me/${image}`;
  }
  wrapIMG.append(img);
  const wrapPrice = createCatalog_Cards_createElemWithClass('div', 'card__price');
  const priceFinal = createCatalog_Cards_createElemWithClass('span', 'card__sale-price');
  priceFinal.textContent = `${price} ₽`;
  if (discount) {
    const saleIcon = createSaleIcon('span', 'card__sale', discount);
    wrapIMG.append(saleIcon);
    const priceStart = createCatalog_Cards_createElemWithClass('span', 'card__start-price');
    priceStart.textContent = `${price} ₽`;
    priceFinal.textContent = Math.round(price * (100 - discount) / 100) + ' ₽';
    wrapPrice.append(priceFinal, priceStart);
  } else {
    wrapPrice.append(priceFinal);
  }
  const itemTitle = createCatalog_Cards_createElemWithClass('p', 'card__title');
  itemTitle.textContent = title;
  link.append(wrapIMG, wrapPrice, title);
  li.append(link);
  return li;
};
const createCatalog_Cards_createTitle = (className, name) => {
  const title = createCatalog_Cards_createElemWithClass('h1', className);
  title.textContent = name;
  return title;
};
const createCatalog_Cards_createCatalog = data => {
  const catalogList = data.map(item => createCatalogItem(item));
  const list = createCatalog_Cards_createElemWithClass('ul', 'benefit__list');
  list.append(...catalogList);
  return list;
};
const createCatalog_Cards_createBreadCrumb = category => {
  const breadCrumb = document.querySelector('.nav-breadcrumb');
  breadCrumb.lastElementChild.querySelector('a').textContent = category;
};
const createCatalog_Cards_createImgCard = ({
  discount,
  image
}) => {
  const imgBox = createCatalog_Cards_createElemWithClass('div', 'good-card__img-box');
  const img = createCatalog_Cards_createElemWithClass('img', 'good-card__img');
  // img.width = '420';
  // img.height = '295';
  if (image === 'image/notimage.jpg') {
    img.src = 'assets/images/no-photo.jpg';
  } else {
    img.src = `https://determined-painted-hawthorn.glitch.me/${image}`;
  }
  imgBox.append(img);
  if (discount) {
    const saleIcon = createSaleIcon('div', 'sale good-card__sale', discount);
    imgBox.append(saleIcon);
  }
  return imgBox;
};
const formatCartPrice = stringPrice => {
  const last = stringPrice % 1000;
  const first = Math.trunc(stringPrice / 1000);
  return String(first) + ' ' + (String(last).padStart(3, '0') || '000');
};
const createCatalog_Cards_createCart = ({
  price: priceStart,
  discount
}) => {
  let priceFinal = Math.round(priceStart * (100 - discount) / 100);
  if (String(priceFinal).length >= 4) {
    priceFinal = formatCartPrice(String(priceFinal));
  }
  if (String(priceStart).length >= 4) {
    priceStart = formatCartPrice(String(priceStart));
  }
  const cart = createCatalog_Cards_createElemWithClass('div', 'good-card__price good-price');
  cart.insertAdjacentHTML('afterbegin', `     
        <p class="good-price__credit">В кредит от 5600 ₽ </p>
        <button class="button good-price__btn">Добавить в корзину</button>
        <button class="good-price__favorite">
          <svg width="33" height="33" viewBox="0 0 33 33" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_901_1437)">
              <path d="M22.6875 4.125C20.295 4.125 17.9987 5.23875 16.5 6.99875C15.0012 5.23875 12.705 4.125 10.3125 4.125C6.0775 4.125 2.75 7.4525 2.75 11.6875C2.75 16.885 7.425 21.12 14.5062 27.555L16.5 29.3563L18.4937 27.5413C25.575 21.12 30.25 16.885 30.25 11.6875C30.25 7.4525 26.9225 4.125 22.6875 4.125ZM16.6375 25.5062L16.5 25.6437L16.3625 25.5062C9.8175 19.58 5.5 15.6613 5.5 11.6875C5.5 8.9375 7.5625 6.875 10.3125 6.875C12.43 6.875 14.4925 8.23625 15.2212 10.12H17.7925C18.5075 8.23625 20.57 6.875 22.6875 6.875C25.4375 6.875 27.5 8.9375 27.5 11.6875C27.5 15.6613 23.1825 19.58 16.6375 25.5062Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_901_1437">
              <rect width="33" height="33" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </button>
        <div class="good-price__outer-box">
          <div class="good-price__inner-box">
            <p class="good-price__subtitle">
              Доставка
            </p>
            <p class="good-price__subtitle-detail">
              1-3 января
            </p>
          </div>
          <div class="good-price__inner-box">
            <p class="good-price__subtitle">
              Продавец
            </p>
            <p class="good-price__subtitle-detail">
              ShopOnline
            </p>          
          </div>
          </div>
          <button class="good-price__bell">Узнать о снижении цены</button>
        </div>
      `);
  const priceFinalElem = createCatalog_Cards_createElemWithClass('span', 'good-price__title');
  priceFinalElem.textContent = `${priceFinal} ₽`;
  cart.prepend(priceFinalElem);
  if (discount) {
    const priceStartElem = createCatalog_Cards_createElemWithClass('span', 'good-price__old-title');
    priceStartElem.textContent = `${priceStart} ₽`;
    priceFinalElem.after(priceStartElem);
  }
  return cart;
};
const createCatalog_Cards_createDescript = ({
  description
}) => {
  const title = createCatalog_Cards_createElemWithClass('h2', 'good-card__subtitle');
  title.textContent = 'Описание:';
  const content = createCatalog_Cards_createElemWithClass('p', 'good-card__description');
  content.textContent = description;
  return {
    title,
    content
  };
};
const createCatalog_Cards_createRecommend = data => {
  const titleRecom = createCatalog_Cards_createElemWithClass('p', 'recommend__title');
  titleRecom.textContent = 'Рекомендуем также';
  const wrapRecom = createCatalog_Cards_createElemWithClass('div', 'recommend__wrap');
  const listRecommend = createCatalog_Cards_createCatalog(data);
  wrapRecom.append(listRecommend);
  return {
    titleRecom,
    wrapRecom
  };
};

;// CONCATENATED MODULE: ./src/script/modules/shopControl.js



const CARTLIST = document.querySelector('.cart-list');
const cart = localStorageCart_getLocalStorage() || [];
const addItemInCart = (cart, dataGood) => {
  const indexGoodInCart = cart.findIndex(item => item.id === dataGood.id);
  console.log(dataGood);
  if (indexGoodInCart === -1) {
    cart.push({
      id: dataGood.id,
      count: 1,
      price: dataGood.price,
      discount: dataGood.discount
    });
    addInLocalStorage(cart);
  } else {
    cart[indexGoodInCart].count++;
    addInLocalStorage(cart);
  }
};
const showCountGoodInCart = () => {
  const cart = localStorageCart_getLocalStorage() || [];
  const countInCartBtn = document.querySelector('.btn-cart__count');
  let countInCart = 0;
  cart.forEach(elem => {
    countInCart += Number(elem.count);
  });
  countInCartBtn.textContent = countInCart || '';
};
const addGoodInCart = dataGood => {
  console.log(dataGood);
  const addInCartBtn = document.querySelector('.good-price__btn');
  addInCartBtn.addEventListener('click', () => {
    if (cart.length === 0) {
      cart.push({
        id: dataGood.id,
        count: 1,
        price: dataGood.price,
        discount: dataGood.discount
      });
      addInLocalStorage(cart);
      showCountGoodInCart();
    } else {
      const cart = getLocalStorage();
      addItemInCart(cart, dataGood);
      showCountGoodInCart();
    }
  });
};
const renderCard = ({
  title,
  price,
  image,
  discount,
  category,
  id
}, count) => {
  console.log(image);
  const priceStart = formatCartPrice(price * count);
  const priceFinal = formatCartPrice(Math.round(price * count * (100 - discount) / 100));
  const li = document.createElement('li');
  li.className = 'cart-list__item';
  li.dataset.name = id;
  li.insertAdjacentHTML('afterbegin', `
      <div class="cart-list__wrap-input">
        <input class="cart-list__input" type="checkbox" name="" id="">
        <div class="cart-list__img">
          <img  src=https://determined-painted-hawthorn.glitch.me/${image} alt="" >
        </div>
      </div>
            
      <div class="cart-list__info">
        <div class="cart-list__content">
          <a href="card.html#${category}#${id}" class="cart-list__title">${title}</a>
          
        </div>
        <div class="cart-list__count-control count">
          <buton class="count__btn count__btn_minus">−</buton>
          <span class="count__text">${count}</span>
          <buton class="count__btn count__btn_plus">+</buton>
        </div>
        <div class="cart-list__price">          
        </div>
      </div>      
      <button class="cart-list__cart"></button>
  `);
  const cartListPrice = li.querySelector('.cart-list__price');
  if (discount) {
    cartListPrice.insertAdjacentHTML('afterbegin', `<p class="cart-list__priceFinal">${priceFinal} ₽</p>
          <p class="cart-list__priceStart">${priceStart} ₽</p>
          <p class="cart-list__credit">В кредит от 5600 ₽ </p>
    `);
  } else {
    cartListPrice.insertAdjacentHTML('afterbegin', `          
        <p class="cart-list__priceFinal">${priceStart} ₽</p>
          <p class="cart-list__credit">В кредит от 5600 ₽ </p>
    `);
  }
  return li;
};
const createDeliveryImg = ({
  image
}) => {
  const wrapImg = document.createElement('div');
  wrapImg.className = 'delivery__box-img';
  const img = document.createElement('img');
  img.className = 'delivery__img';
  img.src = `https://determined-painted-hawthorn.glitch.me/${image}`;
  wrapImg.append(img);
  return wrapImg;
};
const renderShopPage = () => {
  const cartItems = localStorageCart_getLocalStorage() || [];
  console.log(cartItems);
  cartItems.forEach(async item => {
    const url = `https://determined-painted-hawthorn.glitch.me/api/goods/`;
    const data = await fetchGoods(url + item.id);
    const liItem = renderCard(data, item.count);
    CARTLIST.append(liItem);
    const deliveryInfo = document.querySelector('.delivery__info-img');
    const deliveryImg = createDeliveryImg(data);
    deliveryInfo.append(deliveryImg);
  });
};
const makeAllSum = () => {
  const cart = localStorageCart_getLocalStorage();
  let count = 0;
  let sum = 0;
  let saleSum = 0;
  cart.forEach(elem => {
    console.log(elem);
    count += elem.count;
    sum += elem.count * elem.price;
    saleSum += (elem.price - Math.round(elem.price * (100 - elem.discount) / 100)) * elem.count;
  });
  const totalSumFinal = document.querySelector('.total__sumFinal');
  const spanCount = document.querySelector('.span__count');
  const totalSumStart = document.querySelector('.total__sumStart');
  const totalSale = document.querySelector('.total__sale');
  totalSumFinal.textContent = formatCartPrice(String(sum - saleSum)) + ' ₽';
  spanCount.textContent = count;
  totalSale.textContent = formatCartPrice(String(saleSum)) + ' ₽';
  totalSumStart.textContent = formatCartPrice(String(sum)) + ' ₽';
  console.warn(count);
  console.warn(sum);
  console.warn(saleSum);
};
const controlCountBtn = () => {
  CARTLIST.addEventListener('click', async ({
    target
  }) => {
    console.log(target);
    if (target.classList.contains('count__btn_plus')) {
      const currentRow = target.closest('.cart-list__item');
      const currentCountBtn = target.previousElementSibling;
      const fieldPriceFinally = currentRow.querySelector('.cart-list__priceFinal');
      const fieldPriceStart = currentRow.querySelector('.cart-list__priceStart');
      const goodID = currentRow.dataset.name;
      const cart = localStorageCart_getLocalStorage();
      console.log(cart);
      const indexGoodInCart = cart.findIndex(item => item.id === goodID);
      console.log('index:', indexGoodInCart);
      let count;
      if (currentCountBtn.textContent === '-') {
        count = 1;
      } else {
        count = currentCountBtn.textContent;
        count++;
      }
      currentCountBtn.textContent = count;
      if (indexGoodInCart == '-1') {
        const goodID = currentRow.dataset.name;
        cart.push({
          'id': goodID,
          'count': 1
        });
      } else {
        cart[indexGoodInCart].count = +currentCountBtn.textContent;
      }
      localStorageCart_addInLocalStorage(cart);
      const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
      const dataGood = await fetchGoods(url);
      if (dataGood.discount) {
        const price = dataGood.price;
        console.log(price);
        const priceStart = formatCartPrice(dataGood.price * count);
        const priceFinal = formatCartPrice(Math.round(dataGood.price * count * (100 - dataGood.discount) / 100));
        fieldPriceFinally.textContent = priceFinal;
        fieldPriceStart.textContent = priceStart;
      } else {
        const price = dataGood.price;
        console.log(price);
        const priceFinal = formatCartPrice(dataGood.price * count);
        fieldPriceFinally.textContent = priceFinal;
      }
    } else if (target.classList.contains('count__btn_minus')) {
      const currentRow = target.closest('.cart-list__item');
      console.log(currentRow);
      const currentCountBtn = target.nextElementSibling;
      const fieldPriceFinally = currentRow.querySelector('.cart-list__priceFinal');
      const fieldPriceStart = currentRow.querySelector('.cart-list__priceStart');
      let count = currentCountBtn.textContent;
      count--;
      if (count > 0) {
        currentCountBtn.textContent = count;
        const goodID = currentRow.dataset.name;
        const cart = localStorageCart_getLocalStorage();
        const indexGoodInCart = cart.findIndex(item => item.id === goodID);
        cart[indexGoodInCart].count = +currentCountBtn.textContent;
        localStorageCart_addInLocalStorage(cart);
        const url = `https://determined-painted-hawthorn.glitch.me/api/goods/${goodID}`;
        const dataGood = await fetchGoods(url);
        if (dataGood.discount) {
          const price = dataGood.price;
          console.log(price);
          const priceStart = formatCartPrice(dataGood.price * count);
          const priceFinal = formatCartPrice(Math.round(dataGood.price * count * (100 - dataGood.discount) / 100));
          fieldPriceFinally.textContent = priceFinal;
          fieldPriceStart.textContent = priceStart;
        } else {
          const price = dataGood.price;
          console.log(price);
          const priceFinal = formatCartPrice(dataGood.price * count);
          fieldPriceFinally.textContent = priceFinal;
        }
      } else {
        currentCountBtn.textContent = '-';
        const goodID = currentRow.dataset.name;
        const cart = localStorageCart_getLocalStorage();
        const indexGoodInCart = cart.findIndex(item => item.id === goodID);
        if (indexGoodInCart >= 0) {
          cart.splice(indexGoodInCart, 1);
          localStorageCart_addInLocalStorage(cart);
          fieldPriceFinally.textContent = '';
          fieldPriceStart.textContent = '';
        }
      }
    }
    showCountGoodInCart();
    makeAllSum();
  });
};
const onClickCartDelete = () => {
  document.querySelector('.shop').innerHTML = '';
  renderConfirmDeleteModal();
  delFromImgCart();
  const btnAllDel = document.querySelector('.cart__btn-deleteall');
  btnAllDel.removeEventListener('click', onClickCartDelete);
};
const renderConfirmDeleteModal = () => {
  const div = document.createElement('div');
  div.style.cssText = `
    display: flex;
    top: 50%;
    left: 50%;
    margin: 0 auto;
    height: 200px;
    width: 400px;
    z-index: 100;
    font-size: 32px;
    font-weight: bold;
    border: 2px solid #3670c7;      
    border-radius: 10px;
    justify-content: center;
    align-items: center;
    `;
  div.textContent = 'Корзина очищена';
  document.querySelector('.shop').prepend(div);
  setTimeout(() => {
    div.remove();
  }, 2000);
};
const delFromImgCart = () => {
  document.querySelector('.btn-cart__count').innerHTML = '';
};
const ctrlDeleteAll = () => {
  const btnCheckAll = document.querySelector('.cart__input-checkall');
  btnCheckAll.addEventListener('click', () => {
    if (btnCheckAll.checked) {
      const cartListInput = CARTLIST.querySelectorAll('.cart-list__input');
      cartListInput.forEach(elem => elem.checked = true);
      console.log('true');
      const btnAllDel = document.querySelector('.cart__btn-deleteall');
      btnAllDel.addEventListener('click', onClickCartDelete);
      clearLocalStorage();
    } else {
      console.log('++++');
      const cartListInput = CARTLIST.querySelectorAll('.cart-list__input');
      cartListInput.forEach(elem => elem.checked = false);
    }
  });
};
const shopControl = () => {
  renderShopPage();
  showCountGoodInCart();
  controlCountBtn();
  makeAllSum();
  ctrlDeleteAll();
};

;// CONCATENATED MODULE: ./src/script/shop.js



const init = () => {
  showNavigation();
  showHeaderMenu();
  renderMenu();
  shopControl();
  // showCountGoodInCart();
  // renderShopPage();
};

init();
/******/ })()
;